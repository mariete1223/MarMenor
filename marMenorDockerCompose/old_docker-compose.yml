version: "3.8"
services:
  # @context file is served from here
  # Databases
  mongo-db:
    labels:
      org.fiware: 'tutorial'
    image: mongo:${MONGO_DB_VERSION}
    hostname: mongo-db
    container_name: db-mongo
    expose:
      - "${MONGO_DB_PORT}"
    ports:
      - "${MONGO_DB_PORT}:${MONGO_DB_PORT}" # localhost:27017
    networks:
      - default
    volumes:
      - mongo-db:/data/db
      - mongo-config:/data/configdb
    healthcheck:
      test: |
        host=`hostname --ip-address || echo '127.0.0.1'`;
        mongo --quiet $host/test --eval 'quit(db.runCommand({ ping: 1 }).ok ? 0 : 2)' && echo 0 || echo 1
      interval: 5s

    # Tutorial acts as a series of dummy IoT Sensors over HTTP

  orion:
    labels:
      org.fiware: 'tutorial'
    platform: linux/amd64
    image: quay.io/fiware/orion-ld:${ORION_LD_VERSION}
    hostname: orion
    container_name: fiware-orion
    depends_on:
      - mongo-db
    networks:
      - default
    ports:
      - ${EXPOSED_PORT:-1026}:${ORION_LD_PORT:-1026} # localhost:1026
    command: -dbhost mongo-db -logLevel DEBUG -forwarding -experimental
    healthcheck:
      test: curl --fail -s http://orion:${ORION_LD_PORT}/version || exit 1
      interval: 5s

  node-app:
    labels:
      org.fiware: 'tutorial'
    build:
      context: .
      dockerfile: Dockerfile
    container_name: node-app
    ports:
      - "3000:3000"
    depends_on:
      - mongo-db
    networks:
      - default
    environment:
      MONGO_URI: "mongodb://mongo-db:${MONGO_DB_PORT}/marMenor"
    healthcheck:
      test: curl --fail -s http://localhost:3000/health || exit 1
      interval: 5s
      timeout: 3s
      retries: 3

networks:
  default:
    labels:
      org.fiware: 'tutorial'
    ipam:
      config:
        - subnet: 172.18.1.0/24

volumes:
  mongo-db: ~
  mongo-config: ~
  data-models:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/data-models